configuration:
  dependencies:
    - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:1.91.0"

  arguments:
    ansibleStatFile: "_attachments/ansible_stats.json"
    concordPid: ${txId}
    errorMessage: ""

forms:
  manualServiceInfoCheckform:
    - initiative: { label: "Product Initiative", type: "string", allow: [ "hawkeye-goldenarcher-fk" ]}
    - environments: { label: "Deployment Environment", type: "string+", allow: [ "Development", "QA", "Stage", "Performance", "Production" ]}
    - groupId: { label: "Product Group Identifier", type: "string"}
    - artifactId: { label: "Product Artifact Identifier", type: "string" }
    - version: { label: "Product Version", type: "string" }
    - packaging: { label: "Deployment Type", type: "string", allow: [ "jar", "tar", "zip"] }

  manualServiceConfigurationCheckform:
    - configurationsRequired: { label: "Service requires configurations for ${targetEnvironment}?", type: "boolean" }

  manualServiceConfigurationDetailform:
    - configurationType: { label: "Configuration Type", type: "string", allow: [ "CCM", "CCM2" ]}
    - configurationBaseUrl: { label: "Configuration Base URL", type: "string", allow: [ "https://admin.ccm.stg.walmart.com", "https://admin.ccm.prod.walmart.com" ] }

  manualServiceDeployCheckform:
    - environment: { label: "Environment To Deploy", type: "string", readonly: true, allow: "${targetEnvironment}" }
    - servers: { label: "Servers To Deploy", type: "string+", allow: ["node1.neoworkz.org"] }

flows:
  default:
    - log: "Process ID is ${concordPid}"
    - form: manualServiceInfoCheckform
    - set:
        targetInitiative: ${manualServiceInfoCheckform.initiative}
        targetEnvironments: ${manualServiceInfoCheckform.environments}
        groupId: ${manualServiceInfoCheckform.groupId}
        artifactId: ${manualServiceInfoCheckform.artifactId}
        version: ${manualServiceInfoCheckform.version}
        packaging: ${manualServiceInfoCheckform.packaging}
    - call: targetDeployment
      withItems: ${targetEnvironments}

  assignConfigurationStore:
    - log: "Service requires configurations?"
    - form: manualServiceConfigurationCheckform
    - set:
        configurationsNeeded: ${manualServiceConfigurationCheckform.configurationsRequired}
    - if: ${configurationsNeeded}
      then:
        - form: manualServiceConfigurationDetailform
        - set:
            configurationType: ${manualServiceConfigurationDetailform.configurationType}
            configurationBaseUrl: ${manualServiceConfigurationDetailform.configurationBaseUrl}
      else:
        - log: "Configuration value is set to ${configurationsNeeded} ..... skipping"

  targetDeployment:
    - log: "Preparing deployment for environment: ${item}"
    - set:
        targetEnvironment: ${item}
    - call: assignConfigurationStore
    - call: manualServiceDeployCheckform
    - set:
        targetServers: ${manualServiceDeployCheckform.servers}

  deployToEnvironment:
    - try:
        - switch: ${targetEnvironment}
          Development:
            - log: "Starting Process To Deploy To The Deployment Servers"
          QA:
            - log: "Starting Process To Deploy To The QA Servers"
          Stage:
            - log: "Starting Process To Deploy To The Stage Servers"
          Performance:
            - log: "Starting Process To Deploy To The Performance Servers"
          Production:
            - log: "Starting Process To Deploy To The Production Servers"
      error:
        - log: "Exception has been caught during the deployment to enviroment: ${targetEnvironment}"
        - log: "Last Known Error is: ${lastError.getCause()}"
        - throw: ${lastError.message}
