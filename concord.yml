configuration:
  dependencies:
    - "mvn://org.python:jython-standalone:2.7.2"
    - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:1.91.0"

  arguments:
    ansibleStatFile: "_attachments/ansible_stats.json"
    concordPid: ${txId}
    defaultBaseServerPath: "/home/azurerootadmin"
    errorMessage: ""
    inventoryFile: "inventory.ini"

  meta:
    artifactId: ""
    version: ""
    completedStage: ""

forms:
  manualServiceInfoCheckform:
    - initiative: { label: "Product Initiative", type: "string", allow: [ "hawkeye-goldenarcher-fk" ]}
    - environments: { label: "Deployment Environment", type: "string+", allow: [ "Development", "QA", "Stage", "Performance", "Production" ]}
    - groupId: { label: "Product Group Identifier", type: "string"}
    - artifactId: { label: "Product Artifact Identifier", type: "string" }
    - version: { label: "Product Version", type: "string" }
    - packaging: { label: "Deployment Type", type: "string", allow: [ "jar", "tar", "zip"] }

  manualServiceConfigurationCheckform:
    - configurationsRequired: { label: "Service requires configurations for ${targetEnvironment}?", type: "boolean" }

  manualServiceConfigurationDetailform:
    - configurationType: { label: "Configuration Type", type: "string", allow: [ "CCM", "CCM2" ]}
    - configurationBaseUrl: { label: "Configuration Base URL", type: "string", allow: [ "https://admin.ccm.stg.walmart.com", "https://admin.ccm.prod.walmart.com" ] }

  manualServiceDeployCheckform:
    - services: { label: "Services To Deploy", type: "string+" }
    - servers: { label: "Servers To Deploy", type: "string+" }

flows:
  default:
    - log: "Process ID is ${concordPid}"
    - form: manualServiceInfoCheckform
    - set:
        targetInitiative: ${manualServiceInfoCheckform.initiative}
        targetEnvironments: ${manualServiceInfoCheckform.environments}
        groupId: ${manualServiceInfoCheckform.groupId}
        artifactId: ${manualServiceInfoCheckform.artifactId}
        version: ${manualServiceInfoCheckform.version}
        packaging: ${manualServiceInfoCheckform.packaging}
    - call: targetDeployment
      withItems: ${targetEnvironments}

  assignConfigurationStore:
    - log: "Service requires configurations?"
    - form: manualServiceConfigurationCheckform
    - set:
        configurationsNeeded: ${manualServiceConfigurationCheckform.configurationsRequired}
    - if: ${configurationsNeeded}
      then:
        - form: manualServiceConfigurationDetailform
        - set:
            configurationType: ${manualServiceConfigurationDetailform.configurationType}
            configurationBaseUrl: ${manualServiceConfigurationDetailform.configurationBaseUrl}
      else:
        - log: "Configuration value is set to ${configurationsNeeded} ..... skipping"

  targetDeployment:
    - log: "Preparing deployment for environment: ${item}"
    - set:
        targetEnvironment: ${item}
    - call: assignConfigurationStore
    - form: manualServiceDeployCheckform
    - set:
        targetServers: ${manualServiceDeployCheckform.servers}
        targetServices: ${manualServiceDeployCheckform.services}
    - call: deployToEnvironment

  deployToEnvironment:
    - try:
        - switch: ${targetEnvironment}
          Development:
            - log: "Starting Process To Deploy To The Deployment Servers"
            - call: deployCheckpoint
            - call: stageTarget
              withItems: ${targetServices}
          QA:
            - log: "Starting Process To Deploy To The QA Servers"
            - call: deployCheckpoint
            - call: stageTarget
              withItems: ${targetServices}
          Stage:
            - log: "Starting Process To Deploy To The Stage Servers"
            - call: deployCheckpoint
            - call: stageTarget
              withItems: ${targetServices}
          Performance:
            - log: "Starting Process To Deploy To The Performance Servers"
            - call: deployCheckpoint
            - call: stageTarget
              withItems: ${targetServices}
          Production:
            - log: "Starting Process To Deploy To The Production Servers"
            - call: deployCheckpoint
            - call: stageTarget
              withItems: ${targetServices}
      error:
        - log: "Exception has been caught during the deployment to enviroment: ${targetEnvironment}"
        - log: "Last Known Error is: ${lastError.getCause()}"
        - throw: ${lastError.message}

  stageTarget:
    - log: "Preparing to stage service: ${item} which is part of the initiative: ${targetInitiative}"
    - log: "Target Servers: ${targetServers}"
    - if: ${targetServers != ""}
      then:
        - set:
            targets: ${targetServers}
            targetService: ${item}
            serviceDestinationPath: "${defaultBaseServerPath}/${targetInitiative}/services/${targetService}/${version}"
            configDestinationPath: "${defaultBaseServerPath}/${targetInitiative}/services/${targetService}/${version}/configs"
        - call: constructInventoryFile
      else:
        - log: "Target Servers right is empty"

  createDirectoryStructureAnsible:
    - try:
        - task: ansible
          in:
            playbook: "ansibles/Create_File_Structure"
            auth:
              privateKey:
                user: root
                secret:
                  org: "Default"
                  name: deployment_key
            debug: true
            extraVars:
              serviceDestinationPath: ${serviceDestinationPath}
              configDestinationPath: ${configDestinationPath}

  constructInventoryFile:
    - log: "Targets: ${targets}"
    - log: "Invoking transformer.py to create necessary inventory.ini file"
    - try:
        - set:
            deployType: "MiddlewareServers"
        - script: "scripts/transformer.py"
      error:
        - log: "Error has occurred while constructing the inventory.ini file from the transformer.py script"

  deployCheckpoint:
    - switch: ${targetEnvironment}
      Development:
        - checkpoint: "DEPLOY_DEV"
      QA:
        - checkpoint: "DEPLOY_QA"
      Stage:
        - checkpoint: "DEPLOY_STG"
      Performance:
        - checkpoint: "DEPLOY_PERF"
      Production:
        - checkpoint: "DEPLOY_PROD"


